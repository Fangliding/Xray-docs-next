import{b as e,m as t,i as n,G as r,l as i}from"./layout.738a1d32.js";import{i as a,u as d,s as o,a as s,b as c,p as l,c as h,d as g,e as f,f as u,g as w,h as p}from"./edges-f2ad444c.4436a2dd.js";import{l as v,q as y,c as m,h as x}from"./mermaid.core.8b13671c.js";import{c as b}from"./createText-62fc7601.441eef41.js";function N(t){var r,i={options:{directed:t.isDirected(),multigraph:t.isMultigraph(),compound:t.isCompound()},nodes:X(t),edges:E(t)};return n(t.graph())||(i.value=(r=t.graph(),e(r,4))),i}function X(e){return t(e.nodes(),(function(t){var r=e.node(t),i=e.parent(t),a={v:t};return n(r)||(a.value=r),n(i)||(a.parent=i),a}))}function E(e){return t(e.edges(),(function(t){var r=e.edge(t),i={v:t.v,w:t.w};return n(t.name)||(i.name=t.name),n(r)||(i.value=r),i}))}let C={},S={},D={};const B=(e,t)=>(v.trace("In isDecendant",t," ",e," = ",S[t].includes(e)),!!S[t].includes(e)),O=(e,t,n,r)=>{v.warn("Copying children of ",e,"root",r,"data",t.node(e),r);const i=t.children(e)||[];e!==r&&i.push(e),v.warn("Copying (nodes) clusterId",e,"nodes",i),i.forEach((i=>{if(t.children(i).length>0)O(i,t,n,r);else{const a=t.node(i);v.info("cp ",i," to ",r," with parent ",e),n.setNode(i,a),r!==t.parent(i)&&(v.warn("Setting parent",i,t.parent(i)),n.setParent(i,t.parent(i))),e!==r&&i!==e?(v.debug("Setting parent",i,e),n.setParent(i,e)):(v.info("In copy ",e,"root",r,"data",t.node(e),r),v.debug("Not Setting parent for node=",i,"cluster!==rootId",e!==r,"node!==clusterId",i!==e));const d=t.edges(i);v.debug("Copying Edges",d),d.forEach((i=>{v.info("Edge",i);const a=t.edge(i.v,i.w,i.name);v.info("Edge data",a,r);try{((e,t)=>(v.info("Decendants of ",t," is ",S[t]),v.info("Edge is ",e),e.v!==t&&e.w!==t&&(S[t]?S[t].includes(e.v)||B(e.v,t)||B(e.w,t)||S[t].includes(e.w):(v.debug("Tilt, ",t,",not in decendants"),!1))))(i,r)?(v.info("Copying as ",i.v,i.w,a,i.name),n.setEdge(i.v,i.w,a,i.name),v.info("newGraph edges ",n.edges(),n.edge(n.edges()[0]))):v.info("Skipping copy of edge ",i.v,"--\x3e",i.w," rootId: ",r," clusterId:",e)}catch(d){v.error(d)}}))}v.debug("Removing node",i),t.removeNode(i)}))},T=(e,t)=>{const n=t.children(e);let r=[...n];for(const i of n)D[i]=e,r=[...r,...T(i,t)];return r},J=(e,t)=>{v.trace("Searching",e);const n=t.children(e);if(v.trace("Searching children of id ",e,n),n.length<1)return v.trace("This is a valid node",e),e;for(const r of n){const n=J(r,t);if(n)return v.trace("Found replacement for",e," => ",n),n}},I=e=>C[e]&&C[e].externalConnections&&C[e]?C[e].id:e,R=(e,t)=>{if(v.warn("extractor - ",t,N(e),e.children("D")),t>10)return void v.error("Bailing out");let n=e.nodes(),i=!1;for(const r of n){const t=e.children(r);i=i||t.length>0}if(i){v.debug("Nodes = ",n,t);for(const i of n)if(v.debug("Extracting node",i,C,C[i]&&!C[i].externalConnections,!e.parent(i),e.node(i),e.children("D")," Depth ",t),C[i])if(!C[i].externalConnections&&e.children(i)&&e.children(i).length>0){v.warn("Cluster without external connections, without a parent and with children",i,t);let n="TB"===e.graph().rankdir?"LR":"TB";C[i]&&C[i].clusterData&&C[i].clusterData.dir&&(n=C[i].clusterData.dir,v.warn("Fixing dir",C[i].clusterData.dir,n));const a=new r({multigraph:!0,compound:!0}).setGraph({rankdir:n,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));v.warn("Old graph before copy",N(e)),O(i,e,a,i),e.setNode(i,{clusterNode:!0,id:i,clusterData:C[i].clusterData,labelText:C[i].labelText,graph:a}),v.warn("New graph after copy node: (",i,")",N(a)),v.debug("Old graph after copy",N(e))}else v.warn("Cluster ** ",i," **not meeting the criteria !externalConnections:",!C[i].externalConnections," no parent: ",!e.parent(i)," children ",e.children(i)&&e.children(i).length>0,e.children("D"),t),v.debug(C);else v.debug("Not a cluster",i,t);n=e.nodes(),v.warn("New list of nodes",n);for(const r of n){const n=e.node(r);v.warn(" Now next level",r,n),n.clusterNode&&R(n.graph,t+1)}}else v.debug("Done, no node has children",e.nodes())},G=(e,t)=>{if(0===t.length)return[];let n=Object.assign(t);return t.forEach((t=>{const r=e.children(t),i=G(e,r);n=[...n,...i]})),n},L={rect:(e,t)=>{v.info("Creating subgraph rect for ",t.id,t);const n=e.insert("g").attr("class","cluster"+(t.class?" "+t.class:"")).attr("id",t.id),r=n.insert("rect",":first-child"),i=y(m().flowchart.htmlLabels),a=n.insert("g").attr("class","cluster-label"),d="markdown"===t.labelType?b(a,t.labelText,{style:t.labelStyle,useHtmlLabels:i}):a.node().appendChild(w(t.labelText,t.labelStyle,void 0,!0));let o=d.getBBox();if(y(m().flowchart.htmlLabels)){const e=d.children[0],t=x(d);o=e.getBoundingClientRect(),t.attr("width",o.width),t.attr("height",o.height)}const s=0*t.padding,c=s/2,l=t.width<=o.width+s?o.width+s:t.width;t.width<=o.width+s?t.diff=(o.width-t.width)/2-t.padding/2:t.diff=-t.padding/2,v.trace("Data ",t,JSON.stringify(t)),r.attr("style",t.style).attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-l/2).attr("y",t.y-t.height/2-c).attr("width",l).attr("height",t.height+s),i?a.attr("transform","translate("+(t.x-o.width/2)+", "+(t.y-t.height/2)+")"):a.attr("transform","translate("+t.x+", "+(t.y-t.height/2)+")");const h=r.node().getBBox();return t.width=h.width,t.height=h.height,t.intersect=function(e){return p(t,e)},n},roundedWithTitle:(e,t)=>{const n=e.insert("g").attr("class",t.classes).attr("id",t.id),r=n.insert("rect",":first-child"),i=n.insert("g").attr("class","cluster-label"),a=n.append("rect"),d=i.node().appendChild(w(t.labelText,t.labelStyle,void 0,!0));let o=d.getBBox();if(y(m().flowchart.htmlLabels)){const e=d.children[0],t=x(d);o=e.getBoundingClientRect(),t.attr("width",o.width),t.attr("height",o.height)}o=d.getBBox();const s=0*t.padding,c=s/2,l=t.width<=o.width+t.padding?o.width+t.padding:t.width;t.width<=o.width+t.padding?t.diff=(o.width+0*t.padding-t.width)/2:t.diff=-t.padding/2,r.attr("class","outer").attr("x",t.x-l/2-c).attr("y",t.y-t.height/2-c).attr("width",l+s).attr("height",t.height+s),a.attr("class","inner").attr("x",t.x-l/2-c).attr("y",t.y-t.height/2-c+o.height-1).attr("width",l+s).attr("height",t.height+s-o.height-3),i.attr("transform","translate("+(t.x-o.width/2)+", "+(t.y-t.height/2-t.padding/3+(y(m().flowchart.htmlLabels)?5:3))+")");const h=r.node().getBBox();return t.height=h.height,t.intersect=function(e){return p(t,e)},n},noteGroup:(e,t)=>{const n=e.insert("g").attr("class","note-cluster").attr("id",t.id),r=n.insert("rect",":first-child"),i=0*t.padding,a=i/2;r.attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-t.width/2-a).attr("y",t.y-t.height/2-a).attr("width",t.width+i).attr("height",t.height+i).attr("fill","none");const d=r.node().getBBox();return t.width=d.width,t.height=d.height,t.intersect=function(e){return p(t,e)},n},divider:(e,t)=>{const n=e.insert("g").attr("class",t.classes).attr("id",t.id),r=n.insert("rect",":first-child"),i=0*t.padding,a=i/2;r.attr("class","divider").attr("x",t.x-t.width/2-a).attr("y",t.y-t.height/2).attr("width",t.width+i).attr("height",t.height+i);const d=r.node().getBBox();return t.width=d.width,t.height=d.height,t.diff=-t.padding/2,t.intersect=function(e){return p(t,e)},n}};let F={};const k=async(e,t,n,r,a)=>{v.info("Graph in recursive render: XXX",N(t),a);const f=t.graph().rankdir;v.trace("Dir in recursive render - dir:",f);const u=e.insert("g").attr("class","root");t.nodes()?v.info("Recursive render XXX",t.nodes()):v.info("No nodes found for",t),t.edges().length>0&&v.trace("Recursive edges",t.edge(t.edges()[0]));const w=u.insert("g").attr("class","clusters"),p=u.insert("g").attr("class","edgePaths"),y=u.insert("g").attr("class","edgeLabels"),m=u.insert("g").attr("class","nodes");await Promise.all(t.nodes().map((async function(e){const i=t.node(e);if(void 0!==a){const n=JSON.parse(JSON.stringify(a.clusterData));v.info("Setting data for cluster XXX (",e,") ",n,a),t.setNode(a.id,n),t.parent(e)||(v.trace("Setting parent",e,a.id),t.setParent(e,a.id,n))}if(v.info("(Insert) Node XXX"+e+": "+JSON.stringify(t.node(e))),i&&i.clusterNode){v.info("Cluster identified",e,i.width,t.node(e));const a=await k(m,i.graph,n,r,t.node(e)),s=a.elem;d(i,s),i.diff=a.diff||0,v.info("Node bounds (abc123)",e,i,i.width,i.x,i.y),o(s,i),v.warn("Recursive render complete ",s,i)}else t.children(e).length>0?(v.info("Cluster - the non recursive path XXX",e,i.id,i,t),v.info(J(i.id,t)),C[i.id]={id:J(i.id,t),node:i}):(v.info("Node - the non recursive path",e,i.id,i),await s(m,t.node(e),f))}))),t.edges().forEach((function(e){const n=t.edge(e.v,e.w,e.name);v.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),v.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(t.edge(e))),v.info("Fix",C,"ids:",e.v,e.w,"Translateing: ",C[e.v],C[e.w]),c(y,n)})),t.edges().forEach((function(e){v.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e))})),v.info("#############################################"),v.info("###                Layout                 ###"),v.info("#############################################"),v.info(t),i(t),v.info("Graph after layout:",N(t));let x=0;return(e=>G(e,e.children()))(t).forEach((function(e){const n=t.node(e);v.info("Position "+e+": "+JSON.stringify(t.node(e))),v.info("Position "+e+": ("+n.x,","+n.y,") width: ",n.width," height: ",n.height),n&&n.clusterNode?l(n):t.children(e).length>0?(((e,t)=>{v.trace("Inserting cluster");const n=t.shape||"rect";F[t.id]=L[n](e,t)})(w,n),C[n.id].node=n):l(n)})),t.edges().forEach((function(e){const i=t.edge(e);v.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(i),i);const a=h(p,e,i,C,n,t,r);g(i,a)})),t.nodes().forEach((function(e){const n=t.node(e);v.info(e,n.type,n.diff),"group"===n.type&&(x=n.diff)})),{elem:u,diff:x}},P=async(e,t,n,r,i)=>{a(e,n,r,i),f(),u(),F={},S={},D={},C={},v.warn("Graph at first:",JSON.stringify(N(t))),((e,t)=>{!e||t>10?v.debug("Opting out, no graph "):(v.debug("Opting in, graph "),e.nodes().forEach((function(t){e.children(t).length>0&&(v.warn("Cluster identified",t," Replacement id in edges: ",J(t,e)),S[t]=T(t,e),C[t]={id:J(t,e),clusterData:e.node(t)})})),e.nodes().forEach((function(t){const n=e.children(t),r=e.edges();n.length>0?(v.debug("Cluster identified",t,S),r.forEach((e=>{e.v!==t&&e.w!==t&&B(e.v,t)^B(e.w,t)&&(v.warn("Edge: ",e," leaves cluster ",t),v.warn("Decendants of XXX ",t,": ",S[t]),C[t].externalConnections=!0)}))):v.debug("Not a cluster ",t,S)})),e.edges().forEach((function(t){const n=e.edge(t);v.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),v.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(e.edge(t)));let r=t.v,i=t.w;if(v.warn("Fix XXX",C,"ids:",t.v,t.w,"Translating: ",C[t.v]," --- ",C[t.w]),C[t.v]&&C[t.w]&&C[t.v]===C[t.w]){v.warn("Fixing and trixing link to self - removing XXX",t.v,t.w,t.name),v.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=I(t.v),i=I(t.w),e.removeEdge(t.v,t.w,t.name);const a=t.w+"---"+t.v;e.setNode(a,{domId:a,id:a,labelStyle:"",labelText:n.label,padding:0,shape:"labelRect",style:""});const d=structuredClone(n),o=structuredClone(n);d.label="",d.arrowTypeEnd="none",o.label="",d.fromCluster=t.v,o.toCluster=t.v,e.setEdge(r,a,d,t.name+"-cyclic-special"),e.setEdge(a,i,o,t.name+"-cyclic-special")}else(C[t.v]||C[t.w])&&(v.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=I(t.v),i=I(t.w),e.removeEdge(t.v,t.w,t.name),r!==t.v&&(n.fromCluster=t.v),i!==t.w&&(n.toCluster=t.w),v.warn("Fix Replacing with XXX",r,i,t.name),e.setEdge(r,i,n,t.name))})),v.warn("Adjusted Graph",N(e)),R(e,0),v.trace(C))})(t),v.warn("Graph after:",JSON.stringify(N(t))),await k(e,t,r,i)};export{P as r};
