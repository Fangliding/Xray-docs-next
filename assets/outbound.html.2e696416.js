import{r as n,o as s,c as o,a,b as e,w as t,F as p,e as c,d as u}from"./app.7ace5932.js";const r={},l=a("h1",{id:"出站代理",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#出站代理","aria-hidden":"true"},"#"),c(" 出站代理")],-1),d=c("出站连接用于发送数据，可用的协议请见 "),i=c("出站协议"),b=c("。"),k=u('<h2 id="outboundobject" tabindex="-1"><a class="header-anchor" href="#outboundobject" aria-hidden="true">#</a> OutboundObject</h2><p><code>OutboundObject</code> 对应配置文件中 <code>outbounds</code> 项的一个子元素。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>列表中的第一个元素作为主 outbound。当路由匹配不存在或没有匹配成功时，流量由主 outbound 发出。</p></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;outbounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;sendThrough&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.0.0&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;协议名称&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;settings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;标识&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;streamSettings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;proxySettings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;another-outbound-tag&quot;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;mux&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p><code>sendThrough</code>: address</p></blockquote><p>用于发送数据的 IP 地址，当主机有多个 IP 地址时有效，默认值为 <code>&quot;0.0.0.0&quot;</code>。</p><blockquote><p><code>protocol</code>: string</p></blockquote>',7),m=c("连接协议名称，可选的协议类型见 "),q=c("出站协议"),g=c("。"),x=u('<blockquote><p><code>settings</code>: OutboundConfigurationObject</p></blockquote><p>具体的配置内容，视协议不同而不同。详见每个协议中的 <code>OutboundConfigurationObject</code>。</p><blockquote><p><code>tag</code>: string</p></blockquote><p>此出站连接的标识，用于在其它的配置中定位此连接。</p><div class="custom-container danger"><p class="custom-container-title">警告</p><p>当其不为空时，其值必须在所有 <code>tag</code> 中 <strong>唯一</strong>。</p></div>',5),h=a("code",null,"streamSettings",-1),y=c(": "),j=c("StreamSettingsObject"),P=u('<p>底层传输方式（transport）是当前 Xray 节点和其它节点对接的方式</p><blockquote><p><code>proxySettings</code>: <a href="#proxysettingsobject">ProxySettingsObject</a></p></blockquote><p>出站代理配置。当出站代理生效时，此 outbound 的 <code>streamSettings</code> 将不起作用。</p><blockquote><p><code>mux</code>: <a href="#muxobject">MuxObject</a></p></blockquote><p>Mux 相关的具体配置。</p><h3 id="proxysettingsobject" tabindex="-1"><a class="header-anchor" href="#proxysettingsobject" aria-hidden="true">#</a> ProxySettingsObject</h3><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;another-outbound-tag&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p><code>tag</code>: string</p></blockquote><p>当指定另一个 outbound 的标识时，此 outbound 发出的数据，将被转发至所指定的 outbound 发出。</p>',9),f={class:"custom-container danger"},v=a("p",{class:"custom-container-title"},"警告",-1),O=c("这种转发方式"),S=a("strong",null,"不经过",-1),T=c("底层传输方式。如果需要使用支持底层传输方式的转发，请使用 "),C=c("SockOpt.dialerProxy"),M=c("。"),U=a("div",{class:"custom-container danger"},[a("p",{class:"custom-container-title"},"警告"),a("p",null,"此选项与 SockOpt.dialerProxy 不兼容")],-1),D={class:"custom-container tip"},w=a("p",{class:"custom-container-title"},"提示",-1),L=c("兼容 v2fly/v2ray-core 的配置 "),_={href:"https://www.v2fly.org/config/outbounds.html#proxysettingsobject",target:"_blank",rel:"noopener noreferrer"},I=c("transportLayer"),X=u('<h3 id="muxobject" tabindex="-1"><a class="header-anchor" href="#muxobject" aria-hidden="true">#</a> MuxObject</h3><p>Mux 功能是在一条 TCP 连接上分发多个 TCP 连接的数据。实现细节详见 <a href="../../development/protocols/muxcool">Mux.Cool</a>。Mux 是为了减少 TCP 的握手延迟而设计，而非提高连接的吞吐量。使用 Mux 看视频、下载或者测速通常都有反效果。Mux 只需要在客户端启用，服务器端自动适配。</p><p><code>MuxObject</code> 对应 <code>OutboundObject</code> 中的 <code>mux</code> 项。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;enabled&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;concurrency&quot;</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;xudpConcurrency&quot;</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;xudpProxyUDP443&quot;</span><span class="token operator">:</span> <span class="token string">&quot;reject&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p><code>enabled</code>: true | false</p></blockquote><p>是否启用 Mux 转发请求，默认值 <code>false</code>。</p><blockquote><p><code>concurrency</code>: number</p></blockquote><p>最大并发连接数。最小值 <code>1</code>，最大值 <code>1024</code>。省略或者填 <code>0</code> 时都等于 <code>8</code>。</p><p>这个数值表示了一个 TCP 连接上最多承载的子连接数量。比如设置 <code>concurrency=8</code> 时，当客户端发出了 8 个 TCP 请求，Xray 只会发出一条实际的 TCP 连接，客户端的 8 个请求全部由这个 TCP 连接传输。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>填负数时，如 <code>-1</code>，不使用 Mux 模块承载 TCP 流量。</p></div><blockquote><p><code>xudpConcurrency</code>: number</p></blockquote><p>使用新 XUDP 聚合隧道（也就是另一条 Mux 连接）代理 UDP 流量，填写最大并发子 UoT 数量。最小值 <code>1</code>，最大值 <code>1024</code>。 省略或者填 <code>0</code> 时，将与 TCP 流量走同一条路，也就是传统的行为。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>填负数时，如 <code>-1</code>，不使用 Mux 模块承载 UDP 流量。将使用代理协议原本的 UDP 传输方式。例如 <code>Shadowsocks</code> 会使用原生 UDP，<code>VLESS</code> 会使用 UoT。</p></div><blockquote><p><code>xudpProxyUDP443</code>: string</p></blockquote><p>控制 Mux 对于被代理的 UDP/443（QUIC）流量的处理方式：</p><ul><li>默认 <code>reject</code> 拒绝流量（一般浏览器会自动回落到 TCP HTTP2）</li><li><code>allow</code> 允许走 Mux 连接。</li><li>填 <code>skip</code> 时，不使用 Mux 模块承载 UDP 443 流量。将使用代理协议原本的 UDP 传输方式。例如 <code>Shadowsocks</code> 会使用原生 UDP，<code>VLESS</code> 会使用 UoT。</li></ul>',16);r.render=function(c,u){const r=n("RouterLink"),E=n("OutboundLink");return s(),o(p,null,[l,a("p",null,[d,e(r,{to:"/config/outbounds/"},{default:t((()=>[i])),_:1}),b]),k,a("p",null,[m,e(r,{to:"/config/outbounds/"},{default:t((()=>[q])),_:1}),g]),x,a("blockquote",null,[a("p",null,[h,y,e(r,{to:"/config/transport.html#streamsettingsobject"},{default:t((()=>[j])),_:1})])]),P,a("div",f,[v,a("p",null,[O,S,T,e(r,{to:"/config/transport.html#sockoptobject"},{default:t((()=>[C])),_:1}),M])]),U,a("div",D,[w,a("p",null,[L,a("a",_,[I,e(E)])])]),X],64)};export default r;
